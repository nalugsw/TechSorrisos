// Importa fun√ß√µes e vari√°veis essenciais para comunica√ß√£o com a API e hist√≥rico de conversa
import { callGroqAPI, userSession, updateHistory } from "./config.js";

/*
==========================================================
ü§ñ BOT RECEPCIONISTA VIRTUAL DA TECH SORRISOS
‚Üí Simula a recepcionista real do consult√≥rio.
‚Üí Responde d√∫vidas sobre a cl√≠nica, dentistas, servi√ßos, agendamentos, localiza√ß√£o, telefone, hor√°rios, valores, etc.
‚Üí Linguagem simp√°tica, acolhedora, humana e clara.
‚Üí Nunca responde perguntas fora do contexto do consult√≥rio.
==========================================================
*/

// üß† Mem√≥ria local da recepcionista com informa√ß√µes sobre cl√≠nica, dentistas e procedimentos
const memoriaRecepcionista = {
  localizacao: "Rua dos Sorrisos, n¬∫ 123 - S√£o Paulo, SP",
  telefone: "(11) 99999-0000",
  horariosAtendimento: "Segunda a Sexta, das 08h √†s 18h",
  dentistas: [
    { nome: "Dr. Claudio", especialidade: "Ortodontia" },
    { nome: "Dra. Juliana", especialidade: "Cl√≠nica Geral" },
    { nome: "Dra. Marina", especialidade: "Endodontia" },
  ],
  procedimentos: ["limpeza", "clareamento", "canal", "implante", "aparelho"],
};

// üí¨ Mensagem inicial enviada para o usu√°rio ao iniciar conversa com a recepcionista
function mensagemInicial() {
  return `Ol√°! Eu sou a recepcionista virtual da Tech Sorrisos.

Posso ajudar voc√™ com informa√ß√µes sobre:
- Localiza√ß√£o e hor√°rios da cl√≠nica
- Servi√ßos e procedimentos oferecidos
- Informa√ß√µes sobre os dentistas
- Agendamento, remarca√ß√£o e cancelamento de consultas

Como posso ajudar voc√™ hoje?`;
}

// üîç Detecta comandos de in√≠cio para iniciar ou reiniciar a conversa
function isComandoInicio(texto) {
  const t = texto.trim().toLowerCase();
  return t === "/start" || t === "inicio" || t === "in√≠cio";
}

// ‚õî Detecta mensagens fora do escopo da cl√≠nica, para resposta educada
function foraDoEscopo(texto) {
  const palavrasProibidas = [
    "clima", "pol√≠tica", "futebol", "piada", "filme", "m√∫sica", "not√≠cia",
  ];
  return palavrasProibidas.some((p) => texto.toLowerCase().includes(p));
}

// ‚öôÔ∏è Gera o prompt para a IA com todas as informa√ß√µes relevantes da recep√ß√£o
function gerarSystemPrompt() {
  return `
Voc√™ √© uma recepcionista virtual da cl√≠nica odontol√≥gica Tech Sorrisos.
Seu papel √© responder de forma clara, simp√°tica e acolhedora todas as d√∫vidas sobre:
- A cl√≠nica (localiza√ß√£o, telefone, hor√°rios)
- Dentistas (nomes e especialidades)
- Procedimentos e servi√ßos oferecidos
- Agendamento, remarca√ß√£o e cancelamento de consultas
- Valores e condi√ß√µes de pagamento

Nunca responda perguntas fora do contexto da cl√≠nica. Caso receba algo assim, informe educadamente que s√≥ pode ajudar sobre o consult√≥rio.

Informa√ß√µes importantes:
- Localiza√ß√£o: ${memoriaRecepcionista.localizacao}
- Telefone: ${memoriaRecepcionista.telefone}
- Hor√°rio de atendimento: ${memoriaRecepcionista.horariosAtendimento}
- Dentistas: ${memoriaRecepcionista.dentistas.map(d => d.nome + " (" + d.especialidade + ")").join(", ")}
- Procedimentos oferecidos: ${memoriaRecepcionista.procedimentos.join(", ")}
`.trim();
}

// üí¨ Fun√ß√£o principal que recebe mensagem do usu√°rio e retorna resposta da recepcionista
export async function responderComoRecepcionista(mensagemUsuario) {
  // Se for primeira mensagem (hist√≥rico vazio) ou comando de in√≠cio, responde com a mensagem inicial
  if (!userSession.history.length || isComandoInicio(mensagemUsuario)) {
    const msg = mensagemInicial();
    updateHistory("assistant", msg);
    return msg;
  }

  // Se mensagem fora do escopo, responde educadamente que s√≥ ajuda sobre a cl√≠nica
  if (foraDoEscopo(mensagemUsuario)) {
    const aviso = "Desculpe, s√≥ posso ajudar com d√∫vidas relacionadas √† cl√≠nica Tech Sorrisos. Como posso ajudar?";
    updateHistory("assistant", aviso);
    return aviso;
  }

  // Atualiza hist√≥rico com a mensagem do usu√°rio para manter contexto
  updateHistory("user", mensagemUsuario);

  // Gera prompt para a IA com base nas informa√ß√µes da recep√ß√£o
  const systemPrompt = gerarSystemPrompt();

  // Chama a API Groq para gerar a resposta da recepcionista virtual
  const resposta = await callGroqAPI(userSession.history, systemPrompt);

  // Atualiza hist√≥rico com a resposta gerada para continuidade da conversa
  updateHistory("assistant", resposta);

  // Retorna resposta para exibir ao usu√°rio
  return resposta;
}
